<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
          http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <action-state id="initializeLogin">
        <on-entry>
            <evaluate result="flowScope.hasAuthenticationContext" expression="false" />
        </on-entry>
        <evaluate expression="initializeProfileRequestContext"/>
        <evaluate expression="initializeLoginAction" />
        <evaluate expression="populateClientStorageLoadContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="clientStorageLoad" />
        <transition on="NoLoadNeeded" to="continueLogin" />
    </action-state>

    <subflow-state id="clientStorageLoad" subflow="client-storage/read">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="continueLogin"/>
    </subflow-state>

    <action-state id="continueLogin">
        <evaluate expression="buildOidcAuthorizationRequestContextAction" />
        <evaluate expression="populateSessionContext"/>
        <evaluate expression="buildRelyingPartyContextAction" />
        <evaluate expression="buildSAMLMetadataContextAction" />
        <evaluate expression="selectRelyingPartyConfiguration" />
        <evaluate expression="selectProfileConfiguration" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="checkAuthenticationRequired" />
    </action-state>

    <action-state id="checkAuthenticationRequired">
        <evaluate expression="checkAuthenticationRequiredAction"/>
        <transition on="sessionNotFound" to="checkInitialAuthenticationRequired" />
        <transition on="sessionFound" to="checkResolveAttributes" />
    </action-state>

    <decision-state id="checkInitialAuthenticationRequired">
        <if test="initialAuthenticationFlag" then="preInitialSetup" else="postInitialSetup" />
    </decision-state>

    <action-state id="preInitialSetup">
        <evaluate expression="buildAuthenticationContextAction"/>
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="doInitialAuthenticationSubflow" />
    </action-state>

    <subflow-state id="doInitialAuthenticationSubflow" subflow="authn-initial">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="postInitialSetup" />
    </subflow-state>

    <action-state id="postInitialSetup">
        <evaluate expression="buildAuthenticationContextAction"/>
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="doAuthenticationSubflow" />
    </action-state>


    <action-state id="buildAuthenticationContext">
        <evaluate expression="buildAuthenticationContextAction"/>
        <transition on="proceed" to="authenticate" />
    </action-state>

    <subflow-state id="doAuthenticationSubflow" subflow="authn">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="checkResolveAttributes">
            <evaluate result="flowScope.hasAuthenticationContext" expression="true" />
        </transition>
    </subflow-state>

    <decision-state id="checkResolveAttributes">
        <if test="loginConfigLookup.apply(opensamlProfileRequestContext).isResolveAttributes()"
            then="checkForSubjectContext"
            else="doPreAuthorizeUserApprovalAction" />
    </decision-state>

    <decision-state id="checkForSubjectContext">
        <if test="subjectContextLookup.apply(opensamlProfileRequestContext) == null"
            then="populateSubjectContext"
            else="resolveAttributes" />
    </decision-state>

    <action-state id="populateSubjectContext">
        <evaluate expression="populateSubjectContext" />
        <evaluate expression="'proceed'" />
        <transition on="proceed" to="resolveAttributes" />
    </action-state>

    <decision-state id="resolveAttributes">
        <if test="resolveAttributesPredicate.apply(opensamlProfileRequestContext)"
            then="attributeResolution"
            else="doPreAuthorizeUserApprovalAction" />
    </decision-state>

    <action-state id="attributeResolution">
        <evaluate expression="resolveAttributes" />
        <evaluate expression="filterAttributes" />
        <evaluate expression="populatePostAuthnInterceptContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="doPreAuthorizeUserApprovalAction" />
    </action-state>

    <action-state id="doPreAuthorizeUserApprovalAction">
        <evaluate expression="preAuthorizeUserApprovalAction" />
        <transition on="failure" to="error" />
        <transition on="badRequest" to="error" />
        <transition on="clientNotFound" to="error" />
        <transition on="redirect" to="redirectResponse" />
        <transition on="proceed" to="doPostAuthnInterceptSubflow" />
    </action-state>

    <subflow-state id="doPostAuthnInterceptSubflow" subflow="intercept">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="buildResponse" />
    </subflow-state>

    <action-state id="buildResponse">
        <evaluate expression="updateSessionWithSPSession" />
        <evaluate expression="populateClientStorageSaveContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="clientStorageSave" />
        <transition on="NoSaveNeeded" to="doPostAuthorizeUserApprovalAction" />
    </action-state>

    <subflow-state id="clientStorageSave" subflow="client-storage/write">
        <input name="calledAsSubflow" value="true" />
        <transition on="proceed" to="doPostAuthorizeUserApprovalAction" />
    </subflow-state>

    <view-state id="doPostAuthorizeUserApprovalAction" view="oidc/approve" model="oidcResponse">
        <on-entry>
            <evaluate expression="postAuthorizationUserApprovalAction" />
        </on-entry>
        <transition to="done"/>
    </view-state>

    <end-state id="redirectResponse" view="externalRedirect:#{flowScope.oidcResponse.redirectUri}"/>
    <end-state id="done"/>
    <end-state id="error" view="error">
        <on-entry>
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
        </on-entry>
    </end-state>

    <bean-import resource="login-beans.xml" />
</flow>
