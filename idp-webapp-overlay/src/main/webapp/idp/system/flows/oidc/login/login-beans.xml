<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-init-method="initialize">

    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
          p:placeholderPrefix="%{"
          p:placeholderSuffix="}" />

    <bean id="initializeProfileRequestContext"
          class="net.shibboleth.idp.profile.impl.InitializeProfileRequestContext"
          p:profileId="#{T(net.shibboleth.idp.oidc.login.LoginConfiguration).PROFILE_ID}"
          p:loggingId="%{idp.service.logging.oidc:OIDC}"
          p:browserProfile="true" />

    <bean id="initializeLoginAction"
          class="net.shibboleth.idp.oidc.flow.InitializeLoginAction" />

    <bean id="checkAuthenticationRequiredAction"
          class="net.shibboleth.idp.oidc.flow.CheckAuthenticationRequiredAction" />

    <bean id="buildAuthenticationContextAction"
          class="net.shibboleth.idp.oidc.flow.BuildAuthenticationContextAction" />

    <bean id="sessionPrincipalLookupFunction"
          class="com.google.common.base.Functions"
          factory-method="compose">
        <constructor-arg index="0">
            <bean class="net.shibboleth.idp.session.context.navigate.SessionContextPrincipalLookupFunction" />
        </constructor-arg>
        <constructor-arg index="1">
            <bean class="org.opensaml.messaging.context.navigate.ChildContextLookup"
                  c:type="net.shibboleth.idp.session.context.SessionContext" />
        </constructor-arg>
    </bean>

    <bean id="populateSubjectContext"
          class="net.shibboleth.idp.profile.impl.PopulateSubjectContext"
          scope="prototype"
          p:principalNameLookupStrategy-ref="sessionPrincipalLookupFunction" />

    <bean id="populateSessionContext"
          class="net.shibboleth.idp.session.impl.PopulateSessionContext"
          scope="prototype"
          p:activationCondition="%{idp.session.enabled:true}"
          p:httpServletRequest-ref="shibboleth.HttpServletRequest"
          p:sessionResolver-ref="shibboleth.SessionManager" />

    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />

    <bean id="preAuthorizeUserApprovalAction"
            class="net.shibboleth.idp.oidc.flow.PreAuthorizeUserApprovalAction" />

    <bean id="postAuthorizationUserApprovalAction"
          class="net.shibboleth.idp.oidc.flow.PostAuthorizationUserApprovalAction"/>

    <bean id="resolveAttributesPredicate"
          class="net.shibboleth.idp.oidc.config.ResolveAttributesProfileConfigPredicate" />

    <bean id="buildRelyingPartyContextAction"
          class="net.shibboleth.idp.oidc.flow.BuildRelyingPartyContextAction"/>

    <bean id="buildSAMLMetadataContextAction"
      class="net.shibboleth.idp.oidc.flow.BuildOpenIdConnectMetadataContextAction" />

    <bean id="selectProfileConfiguration"
          class="net.shibboleth.idp.profile.impl.SelectProfileConfiguration"
          scope="prototype" />

    <bean id="selectRelyingPartyConfiguration"
          class="net.shibboleth.idp.profile.impl.SelectRelyingPartyConfiguration"
          scope="prototype"
          p:relyingPartyConfigurationResolver-ref="shibboleth.RelyingPartyConfigurationResolver" />

    <bean id="resolveAttributes"
          class="net.shibboleth.idp.profile.impl.ResolveAttributes"
          scope="prototype"
          c:resolverService-ref="shibboleth.AttributeResolverService"
          p:maskFailures="%{idp.service.attribute.resolver.maskFailures:true}" />

    <bean id="filterAttributes"
          class="net.shibboleth.idp.profile.impl.FilterAttributes"
          scope="prototype"
          c:filterService-ref="shibboleth.AttributeFilterService"
          p:maskFailures="%{idp.service.attribute.filter.maskFailures:true}" />

    <bean id="populatePostAuthnInterceptContext"
          class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext"
          scope="prototype"
          p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
        <property name="activeFlowsLookupStrategy">
            <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction" />
        </property>
    </bean>

    <bean id="updateSessionWithSPSession"
          class="net.shibboleth.idp.session.impl.UpdateSessionWithSPSession" scope="prototype"
          p:activationCondition="%{idp.session.trackSPSessions:false}"
          p:sessionManager-ref="shibboleth.SessionManager">
        <property name="SPSessionCreationStrategy">
            <bean class="net.shibboleth.idp.saml.session.impl.SAML2SPSessionCreationStrategy"
                  c:lifetime="%{idp.session.defaultSPlifetime:PT2H}"/>
        </property>
    </bean>

    <bean id="loginConfigLookup"
          class="net.shibboleth.idp.oidc.config.ConfigLookupFunction"
          c:clazz="net.shibboleth.idp.oidc.login.LoginConfiguration" />

    <bean id="subjectContextLookup"
          class="org.opensaml.messaging.context.navigate.ChildContextLookup"
          c:type="net.shibboleth.idp.authn.context.SubjectContext" />

    <bean id="initialAuthenticationFlag" class="java.lang.Boolean">
        <constructor-arg value="#{ '%{idp.authn.flows.initial:}'.trim().length() gt 0 }" type="boolean" />
    </bean>

    <bean id="populateClientStorageLoadContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext"
          scope="prototype"
          p:storageServices-ref="#{ getObject('shibboleth.ClientStorageServices') != null
            ? 'shibboleth.ClientStorageServices' : 'shibboleth.DefaultClientStorageServices' }" />

    <bean id="populateClientStorageSaveContext"
          class="org.opensaml.storage.impl.client.PopulateClientStorageSaveContext"
          scope="prototype"
          p:storageServices-ref="#{ getObject('shibboleth.ClientStorageServices') != null
            ? 'shibboleth.ClientStorageServices' : 'shibboleth.DefaultClientStorageServices' }" />
</beans>