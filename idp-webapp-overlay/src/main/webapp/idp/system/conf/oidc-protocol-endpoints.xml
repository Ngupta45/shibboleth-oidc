<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <oauth:authorization-server
            client-details-service-ref="defaultOAuth2ClientDetailsEntityService"
            authorization-request-manager-ref="shibbolethOAuth2RequestFactory"
            token-services-ref="defaultOAuth2ProviderTokenService"
            user-approval-handler-ref="tofuUserApprovalHandler"
            request-validator-ref="oauthRequestValidator"
            redirect-resolver-ref="blacklistAwareRedirectResolver"
            user-approval-page="forward:/profile#{T(net.shibboleth.idp.oidc.endpoints.LoginEndpoint).URL}"
            authorization-endpoint-url="#{T(net.shibboleth.idp.oidc.endpoints.AuthorizeEndpoint).URL}"
            token-endpoint-url="#{T(net.shibboleth.idp.oidc.endpoints.TokenEndpoint).URL}"
            error-page="/error">
        <oauth:authorization-code authorization-code-services-ref="defaultOAuth2AuthorizationCodeService"/>

        <oauth:implicit />
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:custom-grant token-granter-ref="chainedTokenGranter" />
        <oauth:custom-grant token-granter-ref="jwtAssertionTokenGranter" />

    </oauth:authorization-server>

    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <oauth:resource-server id="resourceServerFilter"
                           token-services-ref="defaultOAuth2ProviderTokenService" />

    <bean id="clientAuthMatcher" class="org.mitre.openid.connect.filter.MultiUrlRequestMatcher">
        <constructor-arg name="filterProcessesUrls">
            <set>
                <value>/profile#{T(net.shibboleth.idp.oidc.endpoints.IntrospectionEndpoint).URL}</value>
                <value>/profile#{T(net.shibboleth.idp.oidc.endpoints.RevocationEndpoint).URL}</value>
                <value>/profile#{T(net.shibboleth.idp.oidc.endpoints.TokenEndpoint).URL}</value>
            </set>
        </constructor-arg>
    </bean>

    <security:http pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.TokenEndpoint).URL}"
                   create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   use-expressions="true">
        <security:intercept-url pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.TokenEndpoint).URL}"
                                access="permitAll" method="OPTIONS" />
        <security:intercept-url pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.TokenEndpoint).URL}"
                                access="isAuthenticated()" />
        <security:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <security:custom-filter ref="clientAssertionEndpointFilter" after="PRE_AUTH_FILTER" />
        <security:custom-filter ref="clientCredentialsEndpointFilter" after="BASIC_AUTH_FILTER" />
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:csrf disabled="true" />
        <security:access-denied-handler ref="oauthAccessDeniedHandler" />
    </security:http>

    <security:http pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.JWKPublishingEndpoint).URL}"
                   use-expressions="true" entry-point-ref="http403EntryPoint" create-session="stateless">
        <security:intercept-url pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.JWKPublishingEndpoint).URL}"
                                access="permitAll"/>
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:csrf disabled="true" />
    </security:http>

    <security:http pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.UserInfoEndpoint).URL}"
                   use-expressions="true" entry-point-ref="oauthAuthenticationEntryPoint" create-session="stateless">
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:expression-handler ref="oauthWebExpressionHandler" />
        <security:csrf disabled="true" />
    </security:http>

    <security:http pattern="#{T(net.shibboleth.idp.oidc.endpoints.WellKnownEndpoint).URL}/**"
                   use-expressions="true" entry-point-ref="http403EntryPoint" create-session="stateless">
        <security:intercept-url pattern="#{T(net.shibboleth.idp.oidc.endpoints.WellKnownEndpoint).URL}/**" access="permitAll"/>
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
    </security:http>

    <security:http pattern="#{T(net.shibboleth.idp.oidc.endpoints.DiscoveryEndpoint).URL}/**"
                   use-expressions="true" entry-point-ref="http403EntryPoint" create-session="stateless">
        <security:intercept-url pattern="#{T(net.shibboleth.idp.oidc.endpoints.DiscoveryEndpoint).URL}/**" access="permitAll"/>
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
    </security:http>

    <security:http pattern="#{T(net.shibboleth.idp.oidc.endpoints.WebfingerEndpoint).URL}/**"
                   use-expressions="true" entry-point-ref="http403EntryPoint" create-session="stateless">
        <security:intercept-url pattern="#{T(net.shibboleth.idp.oidc.endpoints.WebfingerEndpoint).URL}/**" access="permitAll"/>
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
    </security:http>

    <security:http pattern="/profile#{T(net.shibboleth.idp.oidc.endpoints.DynamicRegistrationEndpoint).URL}/**"
                   use-expressions="true" entry-point-ref="oauthAuthenticationEntryPoint" create-session="stateless">
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:expression-handler ref="oauthWebExpressionHandler" />
        <security:intercept-url pattern="/register/**" access="permitAll"/>
    </security:http>

    <security:http disable-url-rewriting="true" use-expressions="true">
        <security:form-login login-page="/profile#{T(net.shibboleth.idp.oidc.endpoints.LoginEndpoint).URL}"
                             authentication-success-handler-ref="authenticationTimeStamper" />
        <security:csrf />
        <security:custom-filter ref="authzRequestFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:expression-handler ref="oauthWebExpressionHandler" />
    </security:http>

    <security:authentication-manager alias="authenticationManager" />


    <!--
    <security:http pattern="/#{T(org.mitre.openid.connect.web.RootController).API_URL}/**"
                   use-expressions="true" entry-point-ref="oauthAuthenticationEntryPoint" create-session="never">
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:expression-handler ref="oauthWebExpressionHandler" />
    </security:http>



    <security:http pattern="/#{T(org.mitre.openid.connect.web.ProtectedResourceRegistrationEndpoint).URL}/**"
                   use-expressions="true" entry-point-ref="oauthAuthenticationEntryPoint" create-session="stateless">
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:expression-handler ref="oauthWebExpressionHandler" />
        <security:intercept-url pattern="/resource/**" access="permitAll"/>
    </security:http>

    <security:http pattern="/#{T(org.mitre.oauth2.web.IntrospectionEndpoint).URL}**"
                   use-expressions="true"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager">
        <security:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <security:custom-filter ref="clientAssertionEndpointFilter" after="PRE_AUTH_FILTER" />
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:custom-filter ref="clientCredentialsEndpointFilter" after="BASIC_AUTH_FILTER" />
    </security:http>

    <security:http pattern="/#{T(org.mitre.oauth2.web.RevocationEndpoint).URL}**"
                   use-expressions="true"
                   entry-point-ref="oauthAuthenticationEntryPoint"
                   create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager">
        <security:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <security:custom-filter ref="clientAssertionEndpointFilter" after="PRE_AUTH_FILTER" /> <
        <security:custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER" />
        <security:custom-filter ref="clientCredentialsEndpointFilter" after="BASIC_AUTH_FILTER" />
    </security:http>

    -->
</beans>
