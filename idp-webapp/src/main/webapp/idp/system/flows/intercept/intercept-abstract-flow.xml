<!--

    Licensed to the University Corporation for Advanced Internet Development,
    Inc. (UCAID) under one or more contributor license agreements.  See the
    NOTICE file distributed with this work for additional information regarding
    copyright ownership. The UCAID licenses this file to You under the Apache
    License, Version 2.0 (the "License"); you may not use this file except in
    compliance with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      abstract="true" parent="intercept.events">

    <!-- Rudimentary impediment to direct execution of subflow. -->
    <input name="calledAsSubflow" type="boolean" required="true" />

    <!-- Defines the possible end-state events, and a global transition rule. -->

    <!-- Successful completion of subflow. -->
    <end-state id="proceed" />

    <!-- Error events to reflect back from this subflow. -->
    <end-state id="InvalidProfileContext" />
    <end-state id="MessageExpired" />
    <end-state id="MessageReplay" />
    <end-state id="MessageAuthenticationError" />
    <end-state id="AttributeReleaseRejected" />
    <end-state id="TermsRejected" />
    <end-state id="ContextCheckDenied" />
    <end-state id="RuntimeException" />

    <action-state id="LogRuntimeException">
        <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.authn').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        <transition to="RuntimeException" />
    </action-state>

    <!-- Default is to turn any event into its own end-state. -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="#{currentEvent.id}" />
    </global-transitions>

</flow>