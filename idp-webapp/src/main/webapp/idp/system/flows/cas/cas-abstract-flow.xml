<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    Licensed to the University Corporation for Advanced Internet Development,
    Inc. (UCAID) under one or more contributor license agreements.  See the
    NOTICE file distributed with this work for additional information regarding
    copyright ownership. The UCAID licenses this file to You under the Apache
    License, Version 2.0 (the "License"); you may not use this file except in
    compliance with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
          http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
      abstract="true">

    <!-- Base flow for all CAS protocol interactions -->

    <action-state id="LogRuntimeException">
        <on-entry>
            <evaluate expression="T(org.slf4j.LoggerFactory).getLogger('net.shibboleth.idp.cas').error('Uncaught runtime exception', flowExecutionException.getCause())" />
        </on-entry>
        <evaluate expression="'RuntimeException'" />
        <transition to="HandleError" />
    </action-state>

    <decision-state id="HandleError">
        <on-entry>
            <evaluate expression="LogEvent" />
        </on-entry>
        <if test="opensamlProfileRequestContext.isBrowserProfile()"
            then="AuditedErrorView"
            else="ProtocolErrorView" />
    </decision-state>

    <!-- View end state that produces an IdP error page displayed to the user -->
    <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
        <on-entry>
            <evaluate expression="ErrorViewPopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="environment" result="requestScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response" />
            <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext')" result="requestScope.custom" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!-- View end state that produces a CAS protocol error message sent to requesting service/relying party -->
    <end-state id="ProtocolErrorView" view="cas/#{flowScope.casProtocolErrorView}">
        <on-entry>
            <evaluate expression="PopulateProtocolError" />
            <evaluate expression="PopulateAuditContext" />
            <evaluate expression="WriteAuditLog" />
            <evaluate expression="PublishProtocolResponse" />
        </on-entry>
        <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
    </end-state>

    <!--
    Default is to turn non-proceed events into an error
    -->
    <global-transitions>
        <transition on-exception="java.lang.RuntimeException" to="LogRuntimeException" />
        <transition on="#{!'proceed'.equals(currentEvent.id)}" to="HandleError" />
    </global-transitions>

    <!-- The import references the parent folder because the abstract flow is used only from one level down. -->
    <bean-import resource="../cas-abstract-beans.xml" />
</flow>