<!--

    Licensed to the University Corporation for Advanced Internet Development,
    Inc. (UCAID) under one or more contributor license agreements.  See the
    NOTICE file distributed with this work for additional information regarding
    copyright ownership. The UCAID licenses this file to You under the Apache
    License, Version 2.0 (the "License"); you may not use this file except in
    compliance with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract, authn/conditions">

    <!--
    This is a login flow for basic-auth or form-based password authentication. The back-end step is named
    "ValidateUsernamePassword" and can be supplied by different back-end implementation files. 
    -->

    <action-state id="ExtractUsernamePasswordFromBasicAuth">
        <evaluate expression="ExtractUsernamePasswordFromBasicAuth" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="ValidateUsernamePassword" />
        
        <!-- Fall through to a different flow if basic-auth extract fails on a passive or non-browser request. -->
        <transition on="#{ opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).isPassive() || !opensamlProfileRequestContext.isBrowserProfile() }" to="ReselectFlow" />
        
        <transition on="NoCredentials" to="SetRPUIInformation" />
        <transition on="InvalidCredentials" to="SetRPUIInformation" />
    </action-state>
    
    <action-state id="SetRPUIInformation">
        <evaluate expression="SetRPUIInformation" />
        <evaluate expression="'proceed'" />
        
        <transition on="proceed" to="DisplayUsernamePasswordPage" />
    </action-state>
    
    <view-state id="DisplayUsernamePasswordPage" view="login">
        <on-render>
            <evaluate expression="environment" result="viewScope.environment" />
            <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext))" result="viewScope.authenticationContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.ui.context.RelyingPartyUIContext))" result="viewScope.rpUIContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationErrorContext))" result="viewScope.authenticationErrorContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationWarningContext))" result="viewScope.authenticationWarningContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(net.shibboleth.idp.authn.context.LDAPResponseContext))" result="viewScope.ldapResponseContext" />
            <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response" />
        </on-render>
        <transition on="proceed" to="ExtractUsernamePasswordFromFormRequest" />
    </view-state>
    
    <action-state id="ExtractUsernamePasswordFromFormRequest">
        <evaluate expression="ExtractUsernamePasswordFromFormRequest" />
        <evaluate expression="'proceed'" />
    
        <!-- Let the validate action handle any problems later. -->        
        <transition to="ValidateUsernamePassword" />
    </action-state>
    
    <action-state id="ValidateUsernamePassword" parent="authn/conditions#ValidateUsernamePassword">
        <evaluate expression="ValidateUsernamePassword" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="proceed" />
        
        <!-- Fall through to a different flow if login fails on a passive or non-browser request. -->
        <transition on="#{ opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext)).isPassive() || !opensamlProfileRequestContext.isBrowserProfile() }" to="ReselectFlow" />

        <!-- Other event transitions are determined by deployer in /flows/authn/conditions/conditions-flow.xml -->
    </action-state>

    <bean-import resource="password-authn-beans.xml" />

</flow>